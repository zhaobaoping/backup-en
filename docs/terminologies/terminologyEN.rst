Terminology
===============

**Account Nonce Value**

Nonce is an abbreviation of Number Used Once or Number Once. A nonce, in information technology, is a number generated for a specific use, 
such as session authentication. Typically, a nonce is some value that varies with time, 
although a very large random number is sometimes used. In general usage, 
nonce means “for the immediate occasion” or “for now.” In the case of Blockchain Proof of Work scenarios, 
the hash value, found by a Miner, matching the network’s Difficulty thus proving the Block Validity is called Nonce as well. 
In BuChain, Account Nonce Value is used to identify the order in which the
transaction is executed when the user submits the transaction.


**Keypair**

In the BUMO project, the keypair is the interface that generates the
public key, private key, address, and signature. Only the ``ED25519``
signature algorithm is supported during the signing process.

**Private Key**

A private key is a piece of code generated in asymmetric-key encryption process by the algorithm. 
It is known only to the owner, and is paired with a public key to set off algorithms for text encryption and decryption.
The private key is a prerequisite for generating the public key and the address, and is
also the basic element for completing the signature. The private key
cannot be changed after it is generated. Once it is lost, it cannot be
retrieved, so it needs to be kept safely.



**Public Key**

A string of characters derived from a private key that can be made public. 
The public key can be used to verify the authenticity of any signature created using the private key.
It does not expose the private key when transmitted between networks. It is also a necessary condition for generating an address.



**Address**

Address is place where cryptocurrency can be sent to and from, in the form of a string of letters and numbers.
A cryptocurrency address can be shared publicly in the form of text or QR code to those who want to send you cryptocurrency.
Similar to real-life addresses, contacts cannot be found without an address, so transactions cannot be completed.



**Signature**

The Signature refers to the process of encrypting and confirming
transaction data by algorithm and private key and obtaining signature
data. The user can verify the integrity and correctness of the
transaction data through the signature data.

**Transaction**

Transaction is the act of exchanging cryptocurrencies on a blockchain. In BuChain, all operations that modify blockchain data are called
transactions, such as issuing assets, transferring assets, sending BUs,
creating accounts, setting metadata and setting permissions, etc.

**Transaction Blob**

The Transaction Blob is a hexadecimal string obtained by serializing a
transaction object. Transaction serialization refers to the process of
converting the state information of a transaction object into a string
that can be stored and transmitted through the ProtoBuf data structure.

**Raw Private Key**

The Raw Private Key is a byte array obtained by a random algorithm. The
Raw Private Key is a prerequisite for generating a private key.

**Raw Public Key**

The Raw Public Key is a byte array generated by processing the raw
private key with the ``ED25519`` algorithm. The Raw Public Key is a
prerequisite for generating a public key.


**Operate the BU Blockchain**

Operate the BU Blockchain refers to writing data to or modifying data in
the BU blockchain.

**Submit Transactions**

Submit Transactions refers to sending a request to write data to or
modify data in the BU blockchain.

**Query the BU Blockchain**

Query the BU Blockchain refers to querying data in the BU blockchain.

**Account Services**

Account Services provide account validity checking and query interfaces.

**Asset Services**

Asset Services provide asset-related query Interfaces that follow the
ATP 1.0 protocol.

**Ctp10Token Services**

Ctp10Token Services provide a validity check and query interfaces
related to contract assets, which follows the CTP 1.0 protocol.

**Contract Services**

Contract Services provide a contract-related validity checking and query
interfaces.

**Transaction Services**

Transaction Services provide a build transaction Blob interface, a
signature interface, a query and a submit transaction interface.

**Block Services**

Block Services provide an interface to query the block.
